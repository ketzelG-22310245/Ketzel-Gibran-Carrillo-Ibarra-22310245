import json
import os

DB_FILE = "arbol.json"

class Nodo:
    def __init__(self, pregunta=None, si=None, no=None, pelicula=None):
        self.pregunta = pregunta
        self.si = si
        self.no = no
        self.pelicula = pelicula

# -------------------------
# SerializaciÃ³n / persistencia
# -------------------------
def nodo_a_dict(n):
    if n is None:
        return None
    return {
        "pregunta": n.pregunta,
        "pelicula": n.pelicula,
        "si": nodo_a_dict(n.si),
        "no": nodo_a_dict(n.no)
    }

def dict_a_nodo(d):
    if d is None:
        return None
    return Nodo(
        pregunta=d.get("pregunta"),
        pelicula=d.get("pelicula"),
        si=dict_a_nodo(d.get("si")),
        no=dict_a_nodo(d.get("no"))
    )

def guardar_arbol(root):
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(nodo_a_dict(root), f, ensure_ascii=False, indent=4)

def cargar_arbol():
    if not os.path.exists(DB_FILE):
        return crear_arbol_inicial()
    with open(DB_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    return dict_a_nodo(data)

# -------------------------
# Entrada validada sÃ­/no
# -------------------------
def pedir_si_no(prompt):
    """Pide una respuesta sÃ­/no y valida (no acepta vacÃ­o ni respuestas desconocidas)."""
    while True:
        r = input(prompt + " (sÃ­/no): ").strip().lower()
        if r in ["sÃ­", "si", "s", "yes", "y"]:
            return True
        if r in ["no", "n"]:
            return False
        print("Respuesta no vÃ¡lida. Responde 'sÃ­' o 'no'.")

# -------------------------
# SubÃ¡rboles por gÃ©nero (construcciÃ³n segura)
# -------------------------
def crear_sub_accion():
    # Hojas y nodos pequeÃ±os
    leaf_superman = Nodo(pelicula="Superman")
    leaf_batman = Nodo(pelicula="Batman")
    node_q_superman = Nodo("Â¿Tu pelÃ­cula es Superman?", si=leaf_superman, no=leaf_batman)

    leaf_ironman = Nodo(pelicula="Iron Man")
    leaf_avengers = Nodo(pelicula="Avengers: Endgame")
    node_q_ironman = Nodo("Â¿Tu pelÃ­cula es Iron Man?", si=leaf_ironman, no=leaf_avengers)
    node_q_marvel = Nodo("Â¿Tu pelÃ­cula es de Marvel?", si=node_q_ironman, no=Nodo(pelicula="Otro superhÃ©roe"))

    node_q_dc = Nodo("Â¿Tu pelÃ­cula es de DC?", si=node_q_superman, no=node_q_marvel)

    leaf_casino = Nodo(pelicula="Casino Royale")
    leaf_skyfall = Nodo(pelicula="Skyfall")
    node_q_bond = Nodo("Â¿Tu pelÃ­cula es James Bond?", si=leaf_casino, no=leaf_skyfall)

    node_q_martial = Nodo("Â¿Tu pelÃ­cula es de artes marciales?",
                         si=Nodo("Â¿Tu pelÃ­cula es de Jackie Chan?",
                                 si=Nodo(pelicula="Rush Hour"),
                                 no=Nodo(pelicula="El maestro borracho")),
                         no=Nodo(pelicula="Otra de acciÃ³n"))

    node_q_spy = Nodo("Â¿Tu pelÃ­cula es de espÃ­as?", si=node_q_bond, no=node_q_martial)

    accion_sub = Nodo("Â¿Tu pelÃ­cula es de superhÃ©roes?", si=node_q_dc, no=node_q_spy)
    return accion_sub

def crear_sub_comedia():
    leaf_10 = Nodo(pelicula="10 cosas que odio de ti")
    leaf_propuesta = Nodo(pelicula="La propuesta")
    node_romcom = Nodo("Â¿Es una comedia romÃ¡ntica?",
                       si=Nodo("Â¿Tu pelÃ­cula es 10 cosas que odio de ti?", si=leaf_10, no=leaf_propuesta),
                       no=None)

    leaf_home_alone = Nodo(pelicula="Mi pobre angelito")
    leaf_parenthood = Nodo(pelicula="PapÃ¡ por siempre")
    node_family = Nodo("Â¿Es una comedia familiar?",
                       si=Nodo("Â¿Tu pelÃ­cula es Mi pobre angelito?", si=leaf_home_alone, no=leaf_parenthood),
                       no=None)

    leaf_scary = Nodo(pelicula="Scary Movie")
    leaf_superhero_movie = Nodo(pelicula="Superhero Movie")
    node_parody = Nodo("Â¿Es una comedia de parodia?",
                       si=Nodo("Â¿Tu pelÃ­cula es Scary Movie?", si=leaf_scary, no=leaf_superhero_movie),
                       no=Nodo(pelicula="Otra comedia"))

    # encadenar
    node_romcom.no = node_family
    node_family.no = node_parody
    return node_romcom

def crear_sub_romance():
    leaf_titanic = Nodo(pelicula="Titanic")
    leaf_noah = Nodo(pelicula="El diario de Noah")
    node_drama = Nodo("Â¿Tu pelÃ­cula es un drama romÃ¡ntico?",
                      si=Nodo("Â¿Tu pelÃ­cula es Titanic?", si=leaf_titanic, no=leaf_noah),
                      no=None)

    leaf_fault = Nodo(pelicula="Bajo la misma estrella")
    leaf_to_all = Nodo(pelicula="A todos los chicos de los que me enamorÃ©")
    node_young = Nodo("Â¿Tu pelÃ­cula es juvenil?",
                      si=Nodo("Â¿Tu pelÃ­cula es Bajo la misma estrella?", si=leaf_fault, no=leaf_to_all),
                      no=None)

    leaf_pride = Nodo(pelicula="Orgullo y Prejuicio")
    leaf_romeo = Nodo(pelicula="Romeo y Julieta")
    node_hist = Nodo("Â¿Tu pelÃ­cula es histÃ³rica?",
                     si=Nodo("Â¿Tu pelÃ­cula es Orgullo y Prejuicio?", si=leaf_pride, no=leaf_romeo),
                     no=Nodo(pelicula="Otro romance"))

    node_drama.no = node_young
    node_young.no = node_hist
    return node_drama

def crear_sub_musical():
    leaf_lionking = Nodo(pelicula="El Rey LeÃ³n")
    leaf_frozen = Nodo(pelicula="Frozen")
    node_anim = Nodo("Â¿Es un musical animado?",
                    si=Nodo("Â¿Tu pelÃ­cula es El Rey LeÃ³n?", si=leaf_lionking, no=leaf_frozen),
                    no=None)

    leaf_little = Nodo(pelicula="La Sirenita")
    leaf_encanto = Nodo(pelicula="Encanto")
    node_disney = Nodo("Â¿Tu pelÃ­cula es de Disney?",
                       si=Nodo("Â¿Tu pelÃ­cula es La Sirenita?", si=leaf_little, no=leaf_encanto),
                       no=None)

    leaf_mis = Nodo(pelicula="Los Miserables")
    leaf_phantom = Nodo(pelicula="El fantasma de la Ã³pera")
    node_broadway = Nodo("Â¿Tu pelÃ­cula es de Broadway?",
                        si=Nodo("Â¿Tu pelÃ­cula es Los Miserables?", si=leaf_mis, no=leaf_phantom),
                        no=Nodo(pelicula="Otro musical"))

    node_anim.no = node_disney
    node_disney.no = node_broadway
    return node_anim

def crear_sub_scifi():
    node_star = Nodo("Â¿Tu pelÃ­cula es Star Wars?",
                     si=Nodo(pelicula="Star Wars: Una nueva esperanza"),
                     no=Nodo(pelicula="Star Wars: El imperio contraataca"))

    node_future = Nodo("Â¿Tu pelÃ­cula es futurista?",
                       si=Nodo("Â¿Tu pelÃ­cula es Blade Runner?", si=Nodo(pelicula="Blade Runner"), no=Nodo(pelicula="Ready Player One")),
                       no=None)

    node_robots = Nodo("Â¿Tu pelÃ­cula es de robots?",
                       si=Nodo(pelicula="Terminator"),
                       no=Nodo(pelicula="Yo, Robot"))

    node_future.no = node_robots
    node_star.no = node_future
    return node_star

def crear_arbol_inicial():
    accion = crear_sub_accion()
    comedia = crear_sub_comedia()
    romance = crear_sub_romance()
    musical = crear_sub_musical()
    scifi = crear_sub_scifi()

    # Encadenar preguntas de gÃ©nero en orden: acciÃ³n -> comedia -> romance -> musical -> scifi
    root = Nodo("Â¿Tu pelÃ­cula es de acciÃ³n?",
                si=accion,
                no=Nodo("Â¿Tu pelÃ­cula es de comedia?",
                        si=comedia,
                        no=Nodo("Â¿Tu pelÃ­cula es de romance?",
                                si=romance,
                                no=Nodo("Â¿Tu pelÃ­cula es un musical?",
                                        si=musical,
                                        no=Nodo("Â¿Tu pelÃ­cula es de ciencia ficciÃ³n?",
                                                si=scifi,
                                                no=Nodo(pelicula="Desconocida")
                                                )
                                        )
                                )
                        )
                )
    return root

# -------------------------
# Juego y aprendizaje
# -------------------------
def hacer_pregunta(nodo):
    """Recursiva: si hay 'pregunta' la pregunta, si no y tiene 'pelicula' es hoja."""
    if nodo is None:
        return aprender(Nodo())

    # Si el nodo tiene texto en 'pregunta' -> decisiÃ³n
    if nodo.pregunta:
        respuesta_si = pedir_si_no(nodo.pregunta)
        if respuesta_si:
            if nodo.si:
                nodo.si = hacer_pregunta(nodo.si)
            else:
                nodo.si = aprender(Nodo())
        else:
            if nodo.no:
                nodo.no = hacer_pregunta(nodo.no)
            else:
                nodo.no = aprender(Nodo())
        return nodo

    # Si no hay pregunta, tratar como hoja de pelÃ­cula (si existe)
    if nodo.pelicula:
        es = pedir_si_no(f"Â¿Tu pelÃ­cula es '{nodo.pelicula}'?")
        if es:
            print("ðŸŽ¬ Â¡AdivinÃ© la pelÃ­cula!")
            return nodo
        else:
            return aprender(nodo)

    # Nodo vacÃ­o: aprender
    return aprender(nodo)

def aprender(nodo):
    pelicula_usuario = input("No la adivinÃ© ðŸ˜… Â¿CuÃ¡l era tu pelÃ­cula?: ").strip()
    # cuando nodo.pelicula es None mostramos texto neutro
    comparacion = nodo.pelicula if nodo.pelicula else "la que intentÃ© adivinar"
    nueva_pregunta = input(f"Dime una pregunta que distinga '{pelicula_usuario}' de {comparacion}: ").strip()
    # validar la respuesta correcta
    correcto_si = pedir_si_no(f"Para '{pelicula_usuario}', Â¿la respuesta a esa nueva pregunta serÃ­a 'sÃ­'?")
    if correcto_si:
        nuevo_nodo = Nodo(pregunta=nueva_pregunta,
                          si=Nodo(pelicula=pelicula_usuario),
                          no=nodo)
    else:
        nuevo_nodo = Nodo(pregunta=nueva_pregunta,
                          si=nodo,
                          no=Nodo(pelicula=pelicula_usuario))
    print("Gracias, he aprendido algo nuevo ðŸ¤–")
    return nuevo_nodo

# -------------------------
# Programa principal
# -------------------------
def iniciar_akinator():
    print("ðŸŽ¥ Bienvenido al Akinator de PelÃ­culas ðŸŽ¬\n")
    arbol = cargar_arbol()

    while True:
        arbol = hacer_pregunta(arbol)
        guardar_arbol(arbol)
        print("\nDatos guardados exitosamente âœ…")

        if not pedir_si_no("Â¿Quieres volver a jugar?"):
            print("ðŸ‘‹ Gracias por jugar. Â¡Hasta la prÃ³xima!")
            break

if __name__ == "__main__":
    iniciar_akinator()
